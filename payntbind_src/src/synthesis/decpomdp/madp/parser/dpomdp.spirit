//we can't simply skip end of lines as they have semantics in the multi-agent
//case - this means we have to explicitly parse the eol's
EOLTOK                
    =   eol_p;

#if SUBGRAMMAR == 0
AGENTSTOK        //new for DECENTRALIZED pomdp
    =   str_p("agents");
DISCOUNTTOK
    =   str_p("discount");
VALUESTOK 
    =   str_p("values");
STATESTOK 
    =   str_p("states"); 
ACTIONSTOK 
    =   str_p("actions");
OBSERVATIONSTOK 
    =   str_p("observations");
TTOK 
    =   str_p("T");
OTOK 
    =   str_p("O");
RTOK 
    =   str_p("R");
UNIFORMTOK 
    =        EOLTOK >> str_p("uniform")
            [SetLastParsedType(self._m_parserObject, UNIFORM)];
INTTOK 
    =        uint_p[StoreLastParsedElement(self._m_parserObject)]; 
#endif            
IDENTITYTOK 
    =   EOLTOK >> str_p("identity")
            [SetLastParsedType(self._m_parserObject, IDENTITY)];
REWARDTOK 
    =   str_p("reward");
COSTTOK 
    =   str_p("cost");
STARTTOK
    =   str_p("start");
INCLUDETOK 
    =   str_p("include");
EXCLUDETOK 
    =   str_p("exclude");
RESETTOK 
    =   str_p("reset");
COLONTOK 
    =   str_p(":");
ASTERICKTOK 
    =   str_p("*")[SetLastParsedType(self._m_parserObject, ASTERICK)];
PLUSTOK 
    =   str_p("+");
MINUSTOK
    =   str_p("-");
FLOATTOK
    =   real_p[StoreLastParsedElement(self._m_parserObject)]; 
        //([0-9]+ \. [0-9]* | \. [0-9]+ | [0-9]+ ) ([eE] [+-]? [0-9]+)?
STRINGTOK 
    =   (lexeme_d[alpha_p >> *(alnum_p | ch_p('_') | ch_p('-') ) ] 
        - reserved_word)[StoreLastParsedElement(self._m_parserObject)];
    ;
        
reserved_word
    =   AGENTSTOK | DISCOUNTTOK | ACTIONSTOK | OBSERVATIONSTOK | TTOK | OTOK
        | RTOK
    ;

dpomdp_file    
    =   eps_p[Initialize(self._m_parserObject)] 
        >> dpomdp[InitializeDPOMDP(self._m_parserObject)]
    ;

dpomdp
    =   //NOTE start_state has been moved to a fixed place in the preamble
        //cassandra's def: preamble start_state param_list
        preamble[AddModels(self._m_parserObject)]
            >> param_list
    ;

preamble        
    =   //NOTE the order of the preamble is now fixed
        //cassandra's def: preamble param_type | /* empty */
        agents_param[DebugOutput("preamble_agents_param")] >>
        discount_param[DebugOutput("preamble_discount_param")] >>
        value_param[DebugOutput("preamble_value_param")] >>
        state_param[DebugOutput("preamble_state_param")] >>
        start_state[DebugOutput("preamble_start_state")]
            [InitializeStates(self._m_parserObject)] >>
        action_param[DebugOutput("preamble_action_param")]
            [InitializeActions(self._m_parserObject)]  >>
        obs_param[DebugOutput("preamble_obs_param")]
            [InitializeObservations(self._m_parserObject)]  
;
agents_param 
    =   AGENTSTOK[DebugOutput("ap_AGENTSTOK")] >> COLONTOK >> agents_tail >> 
            EOLTOK
    ;
agents_tail
    =   INTTOK [SetNrAgents(self._m_parserObject)]
        |   (
            +( STRINGTOK[DebugOutput("il_STRINGTOK_next")]
                [NextStringOfIdentList(self._m_parserObject)] 
            )
            )[AddAgents(self._m_parserObject)]
    ;
discount_param  
    =   DISCOUNTTOK >> COLONTOK >> FLOATTOK[dp_SetDiscountParam(self.
            _m_parserObject)] >> EOLTOK
    ;

value_param    
    =   VALUESTOK >> COLONTOK >> value_tail[DebugOutput("vp_value_tail")] >> EOLTOK
    ;

value_tail     
    =   REWARDTOK[vt_REWARDTOK(self._m_parserObject)]
        | COSTTOK[vt_COSTTOK(self._m_parserObject)]
    ;

state_param    
    =   STATESTOK[SetNrStates(self._m_parserObject,0)] >> COLONTOK >> 
        state_tail[DebugOutput("sp_state_tail")] >> EOLTOK
    ;

state_tail     
    =   INTTOK[SetNrStates(self._m_parserObject)]
            [DebugOutput("st_INTTOK")]
        | state_list[DebugOutput("st_ident_list")]
    ;

state_list     
    =   // ident_list >> STRINGTOK | STRINGTOK
        +( STRINGTOK[AddState(self._m_parserObject)] )
    ;


//new - each agent has its actions on its own line
action_param   
    =   ACTIONSTOK[SetAgentIndex(self._m_parserObject, 0)] >> COLONTOK >>
            +(EOLTOK >> action_param_line[DebugOutput("ap_action_param_line")]) 
            >> EOLTOK
    ;
action_param_line     
    =   action_tail[DebugOutput("apl_action_tail")][SetNextAgentIndex(
            self._m_parserObject)]  
    ;
action_tail    
    =   INTTOK[SetNrActions(self._m_parserObject)]
        | action_list[DebugOutput("at_ident_list")]
    ;
action_list
    =   +( STRINGTOK[AddAction(self._m_parserObject)] )
    ;

obs_param 
    =   OBSERVATIONSTOK[SetAgentIndex(self._m_parserObject, 0)] >> COLONTOK >>
            +(EOLTOK >> obs_param_line[DebugOutput("op_obs_param_line")]) >> 
            EOLTOK 
    ;
obs_param_line
    =   obs_tail[DebugOutput("opl_obs_tail")][SetNextAgentIndex(
            self._m_parserObject)]
    ;
obs_tail 
    =   INTTOK[SetNrObservations(self._m_parserObject)]
        | obs_list[DebugOutput("ot_ident_list")]
    ;
obs_list
    =   +( STRINGTOK[AddObservation(self._m_parserObject)] )
    ;
start_state     
    =        
        (
            STARTTOK[ResetCurMatrix(self._m_parserObject)] >>
            (
                (   COLONTOK >> 
                        (
                            u_matrix[StartStateRowProbs(self._m_parserObject)]
                        | 
                            STRINGTOK[AddStartState(self._m_parserObject)]
                                [ProcessStartStateList(self._m_parserObject)]
                        |   
                            INTTOK[AddStartState(self._m_parserObject)]
                                [ProcessStartStateList(self._m_parserObject)]
                        )
                )
                | (INCLUDETOK >> COLONTOK >> start_state_list
                    [ProcessStartStateList(self._m_parserObject)])
                | (EXCLUDETOK[StartStateExludes(self._m_parserObject)]
                    >> COLONTOK >> start_state_list
                    [ProcessStartStateList(self._m_parserObject)])
            )
        ) >> EOLTOK
;

/*changed to remove left recursion: */
start_state_list    
    =   // cassandra's def: start_state_list state_or_indiv_act_or_obs | state_or_indiv_act_or_obs
        // easy substitute:        +(state_or_indiv_act_or_obs) 
        // NOTE - this allows '*' as states here...
        // we don't want that, so :
        +(STRINGTOK[AddStartState(self._m_parserObject)]
            [DebugOutput("ssl_STRINGTOK")]
        | INTTOK[AddStartState(self._m_parserObject)]
            [DebugOutput("ssl_INTTOK")])
    ;

param_list     
    =   *(param_spec)
    ;

param_spec     
    =   trans_prob_spec
        | obs_prob_spec 
        | reward_spec
;

trans_prob_spec     
    =   TTOK[DebugOutput("tps_TTOK")][ResetCurMatrix(self._m_parserObject)] >> COLONTOK >> trans_spec_tail >> EOLTOK
    ;

trans_spec_tail     
    =   joint_action[DebugOutput("tst_joint_action")] 
        >> 
        COLONTOK[DebugOutput("tst_COLON")] 
        >> 
        (
            (
                from_state[DebugOutput("tst_statefrom")] >> COLONTOK >> 
                (
                    to_state[DebugOutput("tst_stateto")] >> COLONTOK >> prob
                        [DebugOutput("tst_prob")]
                        [ProcessTProb(self._m_parserObject)]
                    | u_matrix[DebugOutput("tst_u_matrix")]
                        [ProcessTRow(self._m_parserObject)]
                )
            )
            | ui_matrix[DebugOutput("tst_ui_matrix")]
                [ProcessTMatrix(self._m_parserObject)]
        )
        
;

obs_prob_spec  
    =   OTOK[DebugOutput("ops_OTOK")][ResetCurMatrix(self._m_parserObject)] >> COLONTOK >> obs_spec_tail >> EOLTOK
    ;

obs_spec_tail  
    =
            joint_action[DebugOutput("ost_joint_action")] 
        >> 
        COLONTOK 
        >>
        (
            (
                to_state[DebugOutput("ost_stateto")] >> COLONTOK >>
                (
                    joint_obs[DebugOutput("ost_joint_obs")] >> COLONTOK >> prob
                        [DebugOutput("ost_prob")]
                        [ProcessOProb(self._m_parserObject)]
                    |
                    u_matrix[DebugOutput("ost_u_matrix")]
                        [ProcessORow(self._m_parserObject)]
                )
            )
            | u_matrix[DebugOutput("ost_u_matrix")]
                [ProcessOMatrix(self._m_parserObject)]
        )
    ;

reward_spec    
    =   RTOK[DebugOutput("rs_rtok")][ResetCurMatrix(self._m_parserObject)] >> COLONTOK  >> reward_spec_tail >> EOLTOK
    ;

reward_spec_tail
    =   joint_action[DebugOutput("rst_joint_action")] 
        >> COLONTOK 
        >> from_state[DebugOutput("rst_statefrom")]
        >> COLONTOK
        >>
        (            
            (
                to_state[DebugOutput("rst_stateto")] 
                >> COLONTOK
                >>
                (
                    joint_obs[DebugOutput("rst_jointobs")] >> COLONTOK 
                    >> FLOATTOK[DebugOutput("rst_FLOATTOK")]
                    [ProcessR(self._m_parserObject)]
                |
                    floats_matrix
                    [DebugOutput("rst_floats_matrix")] 
                    [ProcessRRow(self._m_parserObject)]
                    
                )
            )
        |
            floats_matrix
                [DebugOutput("rst_floats_matrix")]
                [ProcessRMatrix(self._m_parserObject)]
        )
    ;

ui_matrix
    = 
        (
        UNIFORMTOK[DebugOutput("ui_matrix UNIFORMTOK ")]
        | IDENTITYTOK 
        | floats_matrix
        )
    ;

u_matrix  
    =   UNIFORMTOK[DebugOutput("um_UNIFORMTOK")]
//        | RESETTOK - NOTE:reset is not documented by cassandra, therefore 
//          omitted here
        | floats_matrix[DebugOutput("um_floats_matrix")]
    ;

floats_matrix    
    =        //floats_matrix >> floats | floats
        +(floats_row_vector[DebugOutput("pm_floats_row_vector")]
            [NextRowOfMatrix(self._m_parserObject)])
    ;
floats_row_vector
    =
        EOLTOK >> +(FLOATTOK[NextFloatOfRow(self._m_parserObject)])  
    ;


//difference between prob and num is deprecated - only parse doubles
// and do typechecking when putting data in model...(easier)

/*
prob_matrix    
    =        //prob_matrix >> prob | prob
        +(prob_row_vector[DebugOutput("pm_prob_row_vector")][NextRowOfMatrix(
            self._m_parserObject)])
    ;
prob_row_vector
    =
        EOLTOK >> +(prob[DebugOutput("prv_prob")][NextProbOfRow(self._m_parserObject)])  
    ;

num_matrix     
    =        //num_matrix >> number | number
        +(num_row_vector[DebugOutput("nm_num_row_vector")])
    ;

num_row_vector
    =        EOLTOK >> +(number[DebugOutput("nrv_number")])
    ;

*/

from_state
    =   state_or_indiv_act_or_obs[StoreLPFromState(self._m_parserObject)]
    ;
to_state
    =   state_or_indiv_act_or_obs[StoreLPToState(self._m_parserObject)]
    ;
/*
state_or_indiv_act_or_obs          
    =   INTTOK
        | STRINGTOK
        | ASTERICKTOK
    ;
*/
/*in order to discriminate between a joint action specified by
 * 1) a joint action index (or '*')
 * and 
 * 2) multiple individual actions (indices, '*'s or action names)
 *
 * we have to require at least two individual indices in case (2).*/
joint_action         
    =   (   state_or_indiv_act_or_obs[StoreLPAction(self._m_parserObject)] >>
            +(state_or_indiv_act_or_obs[StoreLPAction(self._m_parserObject)])        
        )[StoreLPJointAction(self._m_parserObject)]
        | INTTOK[StoreLPJointAction(self._m_parserObject, true)]
        | ASTERICKTOK
            [WildCardJointAction(self._m_parserObject)]
            [StoreLPJointAction(self._m_parserObject)]
        
        //NYI(" the * joint action ")]//to indicate any joint action...
    ;

/* the parsed sub-rules set the "_m_lp_type" variable, which is used by 
 * StoreLPAction above. Therefore, no functions need to be called here.*/
state_or_indiv_act_or_obs
    =   INTTOK
        | STRINGTOK
        | ASTERICKTOK //[NYI(" the * individual action ")]
    ;
joint_obs
        =   //first try to catch joint actions specified as "* * ... *" which
            //denote all joint observations
            // (we don't want to expand these individual joint observations...)
            (  ASTERICKTOK >> +ASTERICKTOK )
                [WildCardJointObservation(self._m_parserObject)]
        |
            //the regular case of specifying individual observation(indice)s
            (   state_or_indiv_act_or_obs[StoreLPObservation(self._m_parserObject)] >>
                +(state_or_indiv_act_or_obs[StoreLPObservation(self._m_parserObject)])        
            )[StoreLPJointObservation(self._m_parserObject)]
        | 
            //a joint observation index
            INTTOK[StoreLPJointObservation(self._m_parserObject, true)]
        | 
            //a single '*' denoting all joint observations:
            ASTERICKTOK
            [WildCardJointObservation(self._m_parserObject)]
        
        //NYI(" the * joint obs ")]//to indicate any joint obs...
    ;
/*
state_or_indiv_act_or_obs
    =   INTTOK
        | STRINGTOK
        | ASTERICKTOK 
    ;
            
*/
/* old
joint_obs       
    =        +(state_or_indiv_act_or_obs)
        | ASTERICKTOK //to indicate any joint observation...
    ;

state_or_indiv_act_or_obs
    =   INTTOK
        | STRINGTOK
        | ASTERICKTOK
    ;

ident_list     
    =        // ident_list >> STRINGTOK | STRINGTOK
        +( STRINGTOK[DebugOutput("il_STRINGTOK_next")]
            [NextStringOfIdentList(self._m_parserObject)] )
    ;
*/

prob      
    =   FLOATTOK    // try float first -> don't want to be left with ".024" 
        |   INTTOK
    ;



//XXX:
//
//this works:
//R: open-left open-left : tiger-right : * : * +20
//but this doesn't:
//R: open-right open-right : tiger-left : * : * 20

/*
number          
        // try float first -> don't want to be left with ".024" 
    =        float_r
        | int_r
    ;

float_r
    =   FLOATTOK[n_SetLPNumberType(self._m_parserObject,DOUBLE)]
    ;

int_r
    =   (optional_sign[n_SetLPNumUsedOptSign(self._m_parserObject,true)]) >>
            INTTOK[n_SetLPNumberType(self._m_parserObject,INT)]
                [n_ProcessNegation(self._m_parserObject)]
        |   INTTOK[n_SetLPNumUsedOptSign(self._m_parserObject,false)]
                [n_SetLPNumberType(self._m_parserObject,INT)]
    ;

optional_sign  
    =   PLUSTOK[os_SetNegated(self._m_parserObject,false)]
        | MINUSTOK[os_SetNegated(self._m_parserObject,true)]
//      | eps_p[DebugOutput("optional_sign_epsmatch")] 
;

*/
