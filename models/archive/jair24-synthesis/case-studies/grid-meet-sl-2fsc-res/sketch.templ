
dtmc

// 7 | x x x x x x x x
// 6 | x x x          
// 5 | x x x   x x x x
// 4 | x x x   x x x x
// 3 | x x x   x   x x
// 2 | x x x x x   x x
// 1 |     x x x   x x
// 0 |     x x x   x x
// y _________________
//   x 0 1 2 3 4 5 6 7


// agent1 can go in this direction
formula u1 = ya1<7 & !(xa1=3 & ya1=2) & !(ya1=5 & xa1>3);
formula r1 = xa1<7 & !(xa1=4 & ya1<4) & !(xa1=2 & (ya1>2 & ya1<7));
formula d1 = ya1>0 & !(ya1=2 & xa1<2) & !(ya1=7 & xa1>2) & !(ya1=4 & xa1=5);
formula l1 = xa1>0 & !(xa1=2 & ya1<2) & !(xa1=6 & ya1<4) & !(xa1=4 & (ya1>2 & ya1<6));

// updates of coordinates (if possible)
formula y1u = u1 ? (ya1+1) : ya1;
formula x1r = r1 ? (xa1+1) : xa1;
formula y1d = d1 ? (ya1-1) : ya1;
formula x1l = l1 ? (xa1-1) : xa1;


// agent2 can go in this direction
formula u2 = ya2<7 & !(xa2=3 & ya2=2) & !(ya2=5 & xa2>3);
formula r2 = xa2<7 & !(xa2=4 & ya2<4) & !(xa2=2 & (ya2>2 & ya2<7));
formula d2 = ya2>0 & !(ya2=2 & xa2<2) & !(ya2=7 & xa2>2) & !(ya2=4 & xa2=5);
formula l2 = xa2>0 & !(xa2=2 & ya2<2) & !(xa2=6 & ya2<4) & !(xa2=4 & (ya2>2 & ya2<6));

// updates of coordinates (if possible)
formula y2u = u2 ? (ya2+1) : ya2;
formula x2r = r2 ? (xa2+1) : xa2;
formula y2d = d2 ? (ya2-1) : ya2;
formula x2l = l2 ? (xa2-1) : xa2;


const double sl=0.1;

// agent 1 holes
hole int M1_0_1 in {0};
hole int M1_0_0 in {1};
hole int M1_1_1 in {1};
hole int M1_1_0 in {1};
hole int P1_0_1 in {2};
hole int P1_0_0 in {3};
hole int P1_1_1 in {2};
hole int P1_1_0 in {1};

// agent 2 holes
hole int M2_0_1 in {0,1};
hole int M2_0_0 in {0,1};
hole int M2_1_1 in {0,1};
hole int M2_1_0 in {0,1};
hole int P2_0_1 in {1,2,3,4};
hole int P2_0_0 in {1,2,3,4};
hole int P2_1_1 in {1,2,3,4};
hole int P2_1_0 in {1,2,3,4};

module strategy1
	pick : [0..5] init 0;
	mem : [0..1] init 0;

	[p] pick = 0 & mem = 0 & r1  -> (mem'=M1_0_1) & (pick'=P1_0_1);
	[p] pick = 0 & mem = 0 & !r1 -> (mem'=M1_0_0) & (pick'=P1_0_0);
	[p] pick = 0 & mem = 1 & r1  -> (mem'=M1_1_1) & (pick'=P1_1_1);
	[p] pick = 0 & mem = 1 & !r1 -> (mem'=M1_1_0) & (pick'=P1_1_0);

	[up1]    pick=1 -> (pick'=5);
	[right1] pick=2 -> (pick'=5);
	[down1]  pick=3 -> (pick'=5);
	[left1]  pick=4 -> (pick'=5);

	[r] pick=5 -> (pick'=0);
endmodule


module strategy2
	pick2 : [0..5] init 0;
	mem2 : [0..1] init 0;

	[p] pick2 = 0 & mem2 = 0 & l2  -> (mem2'=M2_0_1) & (pick2'=P2_0_1);
	[p] pick2 = 0 & mem2 = 0 & !l2 -> (mem2'=M2_0_0) & (pick2'=P2_0_0);
	[p] pick2 = 0 & mem2 = 1 & l2  -> (mem2'=M2_1_1) & (pick2'=P2_1_1);
	[p] pick2 = 0 & mem2 = 1 & !l2 -> (mem2'=M2_1_0) & (pick2'=P2_1_0);

	[up2]    pick2=1 -> (pick2'=5);
	[right2] pick2=2 -> (pick2'=5);
	[down2]  pick2=3 -> (pick2'=5);
	[left2]  pick2=4 -> (pick2'=5);

	[r] pick2=5 -> (pick2'=0);
endmodule




module grid
	
	xa1 : [0..7] init 2; // agent1 x coordinate
	ya1 : [0..7] init 5; // agent1 y coordinate

	xa2 : [0..7] init 6; // agent2 x coordinate
	ya2 : [0..7] init 2; // agent2 y coordinate
	

	[up1]        true -> 1-sl: (ya1'=y1u) + sl: true;
    [right1]     true -> 1-sl: (xa1'=x1r) + sl: true;
    [down1]      true -> 1-sl: (ya1'=y1d) + sl: true;
    [left1]      true -> 1-sl: (xa1'=x1l) + sl: true;

	[up2]        pick=5 -> 1-sl: (ya2'=y2u) + sl: true;
    [right2]     pick=5 -> 1-sl: (xa2'=x2r) + sl: true;
    [down2]      pick=5 -> 1-sl: (ya2'=y2d) + sl: true;
    [left2]      pick=5 -> 1-sl: (xa2'=x2l) + sl: true;
	
	
endmodule

// reward
rewards "steps"
    [] pick=0 & pick2=0 : 1;
endrewards


rewards "moves"
	[up1]    true : 1;
    [right1] true : 1;
    [down1]  true : 1;
    [left1]  true : 1;

    [up2]    true : 1;
    [right2] true : 1;
    [down2]  true : 1;
    [left2]  true : 1;
endrewards

// target
label "goal" = (xa1=xa2) & (ya1=ya2);

