// herman's self stabilising algorithm [Her90]
// gxn/dxp 13/07/02

// the procotol is synchronous with no nondeterminism (a DTMC)
dtmc

const int CMAX = 2;

const double pFair = 0.5;
const double pUnfairLow = 0.25;
const double pUnfairHigh = 1 - pUnfairLow;
const int MAXMEM = 2;

const int M0LFAIR;
const int M1LFAIR;
const int M0HFAIR;
const int M1HFAIR;
const int M0A;
const int M0B;
const int M0C;
const int M1A;
const int M1B;
const int M1C;
const int M2A;
const int M2B;
const int M2C;


module initialise
    start : [0..1] init 0;
    [go] start = 0 -> (start'=1);
    [step1] start = 1 -> (start'=1);
endmodule


module controller
    round : [0..5] init 1;
    syncs : [0..CMAX] init 0;

    [step1] round = 1 -> (round'=2);
    [step2] round = 2 -> (round'=3);
    [step3] round = 3 -> (round'=4);
    [step4] round = 4 -> (round'=5);
    [step5] round = 5 -> (round'=0);
    [sync] round = 0 -> (round'=1) & (syncs'=min(syncs+1,CMAX));

endmodule

// module for process 1
module process1

    // Boolean variable for process 1
    x1 : [0..1] init 0;
    y1 : [0..1] init 0;
    m1 : [0..MAXMEM] init 0;

    [go]  (true) -> 0.5: (x1'=0) + 0.5: (x1'=1);

    [step1]  (x1=x7) & x1 = 0 & m1 = 0 & M0LFAIR=0 -> pUnfairLow : (y1'=0) & (m1'=M0A) + 1-pUnfairLow : (y1'=1) & (m1'=M0B);
    [step1]  (x1=x7) & x1 = 0 & m1 = 0 & M0LFAIR=1 -> pFair : (y1'=0) & (m1'=M0A) + 1-pFair : (y1'=1) & (m1'=M0B);
    [step1]  (x1=x7) & x1 = 0 & m1 = 0 & M0LFAIR=2 -> pUnfairHigh : (y1'=0) & (m1'=M0A) + 1-pUnfairHigh : (y1'=1) & (m1'=M0B);
    [step1] !(x1=x7) & x1 = 0 & m1 = 0 -> (y1'=x7) & (m1'=M0C);

    [step1]  (x1=x7) & x1 = 1 & m1 = 0 & M0LFAIR=0 -> pUnfairLow : (y1'=0) & (m1'=M0A) + 1-pUnfairLow : (y1'=1) & (m1'=M0B);
    [step1]  (x1=x7) & x1 = 1 & m1 = 0 & M0LFAIR=1 -> pFair : (y1'=0) & (m1'=M0A) + 1-pFair : (y1'=1) & (m1'=M0B);
    [step1]  (x1=x7) & x1 = 1 & m1 = 0 & M0LFAIR=2 -> pUnfairHigh : (y1'=0) & (m1'=M0A) + 1-pUnfairHigh : (y1'=1) & (m1'=M0B);
    [step1] !(x1=x7) & x1 = 1 & m1 = 0 -> (y1'=x7) & (m1'=M0C);

    [step1]  (x1=x7) & x1 = 0 & m1 = 1 & M1LFAIR=0 -> pUnfairLow : (y1'=0) & (m1'=M1A) + 1-pUnfairLow : (y1'=1) & (m1'=M1B);
    [step1]  (x1=x7) & x1 = 0 & m1 = 1 & M1LFAIR=1 -> pFair : (y1'=0) & (m1'=M1A) + 1-pFair : (y1'=1) & (m1'=M1B);
    [step1]  (x1=x7) & x1 = 0 & m1 = 1 & M1LFAIR=2 -> pUnfairHigh : (y1'=0) & (m1'=M1A) + 1-pUnfairHigh : (y1'=1) & (m1'=M1B);
    [step1] !(x1=x7) & x1 = 0 & m1 = 1 -> (y1'=x7) & (m1'=M1C);

    [step1]  (x1=x7) & x1 = 1 & m1 = 1 & M1LFAIR=0 -> pUnfairLow : (y1'=0) & (m1'=M1A) + 1-pUnfairLow : (y1'=1) & (m1'=M1B);
    [step1]  (x1=x7) & x1 = 1 & m1 = 1 & M1LFAIR=1 -> pFair : (y1'=0) & (m1'=M1A) + 1-pFair : (y1'=1) & (m1'=M1B);
    [step1]  (x1=x7) & x1 = 1 & m1 = 1 & M1LFAIR=2 -> pUnfairHigh : (y1'=0) & (m1'=M1A) + 1-pUnfairHigh : (y1'=1) & (m1'=M1B);
    [step1] !(x1=x7) & x1 = 1 & m1 = 1 -> (y1'=x7) & (m1'=M1C);


    [sync] true -> (x1' = y1) & (y1'=0);

endmodule

// add further processes through renaming
module process2 = process1 [ x1=x2, y1=y2, x7=x1, m1=m2, step1=step2 ] endmodule
module process3 = process1 [ x1=x3, y1=y3, x7=x2, m1=m3, step1=step3 ] endmodule
module process4 = process1 [ x1=x4, y1=y4, x7=x3, m1=m4, step1=step4 ] endmodule
//module process5 = process1 [ x1=x5, x7=x4, m1=m5 ] endmodule
//module process6 = process1 [ x1=x6, x7=x5, m1=m6 ] endmodule
module process7 = process1 [ x1=x7, y1=y7, x7=x4, m1=m7, step1=step5 ] endmodule

// cost - 1 in each state (expected number of steps)
rewards "steps"
    round=0 : 1;
endrewards

// set of initial states: all (i.e. any possible initial configuration of tokens)

// formula, for use in properties: number of tokens
// (i.e. number of processes that have the same value as the process to their left)
formula num_tokens = (x1=x2?1:0)+(x2=x3?1:0)+(x3=x4?1:0)+(x4=x7?1:0)+(x7=x1?1:0);

// label - stable configurations (1 token)
label "stable" = num_tokens=1 & round =1;

